package com.laralex.opengl_minimal_facade
import android.opengl.GLES32
import android.os.Build
import androidx.annotation.RequiresApi

@SuppressWarnings("unused")
object GLStateVariable {
    interface IVar<T> {
        fun glGet(): T
    }
    interface IVarWithIndexArg<T> {
        fun glGet(idx: Int): T
    }
    interface IVarWithOffsetName<T> {
        fun glGet(glCodeOffset: Int): T
    }
    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)
    enum class IntegerVariableGLES31(val glCode: Int) : IVar<Long> {
        GL_DISPATCH_INDIRECT_BUFFER_BINDING(GLES32.GL_DISPATCH_INDIRECT_BUFFER_BINDING),
        GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS(GLES32.GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS),
        GL_MAX_COLOR_TEXTURE_SAMPLES(GLES32.GL_MAX_COLOR_TEXTURE_SAMPLES),
        GL_MAX_COMBINED_ATOMIC_COUNTERS(GLES32.GL_MAX_COMBINED_ATOMIC_COUNTERS),
        GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS(GLES32.GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS),
        GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS(GLES32.GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS),
        GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS(GLES32.GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS),
        GL_MAX_COMPUTE_ATOMIC_COUNTERS(GLES32.GL_MAX_COMPUTE_ATOMIC_COUNTERS),
        GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS(GLES32.GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS),
        GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS(GLES32.GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS),
        GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS(GLES32.GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS),
        GL_MAX_COMPUTE_UNIFORM_BLOCKS(GLES32.GL_MAX_COMPUTE_UNIFORM_BLOCKS),
        GL_MAX_COMPUTE_UNIFORM_COMPONENTS(GLES32.GL_MAX_COMPUTE_UNIFORM_COMPONENTS),
        GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS(GLES32.GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS),
        GL_MAX_DEPTH_TEXTURE_SAMPLES(GLES32.GL_MAX_DEPTH_TEXTURE_SAMPLES),
        GL_MAX_FRAGMENT_ATOMIC_COUNTERS(GLES32.GL_MAX_FRAGMENT_ATOMIC_COUNTERS),
        GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS(GLES32.GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS),
        GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS(GLES32.GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS),
        GL_MAX_FRAMEBUFFER_HEIGHT(GLES32.GL_MAX_FRAMEBUFFER_HEIGHT),
        GL_MAX_FRAMEBUFFER_SAMPLES(GLES32.GL_MAX_FRAMEBUFFER_SAMPLES),
        GL_MAX_FRAMEBUFFER_WIDTH(GLES32.GL_MAX_FRAMEBUFFER_WIDTH),
        GL_MAX_INTEGER_SAMPLES(GLES32.GL_MAX_INTEGER_SAMPLES),
        GL_MAX_SAMPLE_MASK_WORDS(GLES32.GL_MAX_SAMPLE_MASK_WORDS),
        GL_MAX_SHADER_STORAGE_BLOCK_SIZE(GLES32.GL_MAX_SHADER_STORAGE_BLOCK_SIZE),
        GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS(GLES32.GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS),
        GL_MAX_UNIFORM_LOCATIONS(GLES32.GL_MAX_UNIFORM_LOCATIONS),
        GL_MAX_VERTEX_ATOMIC_COUNTERS(GLES32.GL_MAX_VERTEX_ATOMIC_COUNTERS),
        GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS(GLES32.GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS),
        GL_MAX_VERTEX_ATTRIB_BINDINGS(GLES32.GL_MAX_VERTEX_ATTRIB_BINDINGS),
        GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET(GLES32.GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET),
        GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS(GLES32.GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS),
        GL_PROGRAM_PIPELINE_BINDING(GLES32.GL_PROGRAM_PIPELINE_BINDING),
        GL_SAMPLE_MASK_VALUE(GLES32.GL_SAMPLE_MASK_VALUE),
        GL_SHADER_STORAGE_BUFFER_BINDING(GLES32.GL_SHADER_STORAGE_BUFFER_BINDING),
        GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT(GLES32.GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT),
        GL_TEXTURE_BINDING_2D_MULTISAMPLE(GLES32.GL_TEXTURE_BINDING_2D_MULTISAMPLE);

        override fun glGet(): Long = rawGetIntArray(glCode, 1)[0]
    }
    enum class IntegerVariable(val glCode: Int) : IVar<Long> {
        GL_ACTIVE_TEXTURE(GLES32.GL_ACTIVE_TEXTURE),
        GL_ALPHA_BITS(GLES32.GL_ALPHA_BITS),
        GL_ARRAY_BUFFER_BINDING(GLES32.GL_ARRAY_BUFFER_BINDING),
        GL_BLEND_DST_ALPHA(GLES32.GL_BLEND_DST_ALPHA),
        GL_BLEND_DST_RGB(GLES32.GL_BLEND_DST_RGB),
        GL_BLEND_EQUATION_ALPHA(GLES32.GL_BLEND_EQUATION_ALPHA),
        GL_BLEND_EQUATION_RGB(GLES32.GL_BLEND_EQUATION_RGB),
        GL_BLEND_SRC_ALPHA(GLES32.GL_BLEND_SRC_ALPHA),
        GL_BLEND_SRC_RGB(GLES32.GL_BLEND_SRC_RGB),
        GL_BLUE_BITS(GLES32.GL_BLUE_BITS),
        GL_COPY_READ_BUFFER_BINDING(GLES32.GL_COPY_READ_BUFFER_BINDING),
        GL_COPY_WRITE_BUFFER_BINDING(GLES32.GL_COPY_WRITE_BUFFER_BINDING),
        GL_CULL_FACE_MODE(GLES32.GL_CULL_FACE_MODE),
        GL_CURRENT_PROGRAM(GLES32.GL_CURRENT_PROGRAM),
        GL_DEPTH_BITS(GLES32.GL_DEPTH_BITS),
        GL_DEPTH_FUNC(GLES32.GL_DEPTH_FUNC),
        GL_DRAW_FRAMEBUFFER_BINDING(GLES32.GL_DRAW_FRAMEBUFFER_BINDING),
        GL_ELEMENT_ARRAY_BUFFER_BINDING(GLES32.GL_ELEMENT_ARRAY_BUFFER_BINDING),
        GL_FRAGMENT_SHADER_DERIVATIVE_HINT(GLES32.GL_FRAGMENT_SHADER_DERIVATIVE_HINT),
        GL_FRONT_FACE(GLES32.GL_FRONT_FACE),
        GL_GENERATE_MIPMAP_HINT(GLES32.GL_GENERATE_MIPMAP_HINT),
        GL_GREEN_BITS(GLES32.GL_GREEN_BITS),
        GL_IMPLEMENTATION_COLOR_READ_FORMAT(GLES32.GL_IMPLEMENTATION_COLOR_READ_FORMAT),
        GL_IMPLEMENTATION_COLOR_READ_TYPE(GLES32.GL_IMPLEMENTATION_COLOR_READ_TYPE),
        GL_MAJOR_VERSION(GLES32.GL_MAJOR_VERSION),
        GL_MAX_3D_TEXTURE_SIZE(GLES32.GL_MAX_3D_TEXTURE_SIZE),
        GL_MAX_ARRAY_TEXTURE_LAYERS(GLES32.GL_MAX_ARRAY_TEXTURE_LAYERS),
        GL_MAX_COLOR_ATTACHMENTS(GLES32.GL_MAX_COLOR_ATTACHMENTS),
        GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS(GLES32.GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS),
        GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS(GLES32.GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS),
        GL_MAX_COMBINED_UNIFORM_BLOCKS(GLES32.GL_MAX_COMBINED_UNIFORM_BLOCKS),
        GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS(GLES32.GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS),
        GL_MAX_CUBE_MAP_TEXTURE_SIZE(GLES32.GL_MAX_CUBE_MAP_TEXTURE_SIZE),
        GL_MAX_DRAW_BUFFERS(GLES32.GL_MAX_DRAW_BUFFERS),
        GL_MAX_ELEMENT_INDEX(GLES32.GL_MAX_ELEMENT_INDEX),
        GL_MAX_ELEMENTS_INDICES(GLES32.GL_MAX_ELEMENTS_INDICES),
        GL_MAX_ELEMENTS_VERTICES(GLES32.GL_MAX_ELEMENTS_VERTICES),
        GL_MAX_FRAGMENT_INPUT_COMPONENTS(GLES32.GL_MAX_FRAGMENT_INPUT_COMPONENTS),
        GL_MAX_FRAGMENT_UNIFORM_BLOCKS(GLES32.GL_MAX_FRAGMENT_UNIFORM_BLOCKS),
        GL_MAX_FRAGMENT_UNIFORM_COMPONENTS(GLES32.GL_MAX_FRAGMENT_UNIFORM_COMPONENTS),
        GL_MAX_FRAGMENT_UNIFORM_VECTORS(GLES32.GL_MAX_FRAGMENT_UNIFORM_VECTORS),
        GL_MAX_PROGRAM_TEXEL_OFFSET(GLES32.GL_MAX_PROGRAM_TEXEL_OFFSET),
        GL_MAX_RENDERBUFFER_SIZE(GLES32.GL_MAX_RENDERBUFFER_SIZE),
        GL_MAX_SAMPLES(GLES32.GL_MAX_SAMPLES),
        GL_MAX_SERVER_WAIT_TIMEOUT(GLES32.GL_MAX_SERVER_WAIT_TIMEOUT),
        GL_MAX_TEXTURE_IMAGE_UNITS(GLES32.GL_MAX_TEXTURE_IMAGE_UNITS),
        GL_MAX_TEXTURE_SIZE(GLES32.GL_MAX_TEXTURE_SIZE),
        GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS(GLES32.GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS),
        GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS(GLES32.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS),
        GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS(GLES32.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS),
        GL_MAX_UNIFORM_BLOCK_SIZE(GLES32.GL_MAX_UNIFORM_BLOCK_SIZE),
        GL_MAX_UNIFORM_BUFFER_BINDINGS(GLES32.GL_MAX_UNIFORM_BUFFER_BINDINGS),
        GL_MAX_VARYING_COMPONENTS(GLES32.GL_MAX_VARYING_COMPONENTS),
        GL_MAX_VARYING_VECTORS(GLES32.GL_MAX_VARYING_VECTORS),
        GL_MAX_VERTEX_ATTRIBS(GLES32.GL_MAX_VERTEX_ATTRIBS),
        GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS(GLES32.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS),
        GL_MAX_VERTEX_OUTPUT_COMPONENTS(GLES32.GL_MAX_VERTEX_OUTPUT_COMPONENTS),
        GL_MAX_VERTEX_UNIFORM_BLOCKS(GLES32.GL_MAX_VERTEX_UNIFORM_BLOCKS),
        GL_MAX_VERTEX_UNIFORM_COMPONENTS(GLES32.GL_MAX_VERTEX_UNIFORM_COMPONENTS),
        GL_MAX_VERTEX_UNIFORM_VECTORS(GLES32.GL_MAX_VERTEX_UNIFORM_VECTORS),
        GL_MIN_PROGRAM_TEXEL_OFFSET(GLES32.GL_MIN_PROGRAM_TEXEL_OFFSET),
        GL_MINOR_VERSION(GLES32.GL_MINOR_VERSION),
        GL_NUM_COMPRESSED_TEXTURE_FORMATS(GLES32.GL_NUM_COMPRESSED_TEXTURE_FORMATS),
        GL_NUM_EXTENSIONS(GLES32.GL_NUM_EXTENSIONS),
        GL_NUM_PROGRAM_BINARY_FORMATS(GLES32.GL_NUM_PROGRAM_BINARY_FORMATS),
        GL_NUM_SHADER_BINARY_FORMATS(GLES32.GL_NUM_SHADER_BINARY_FORMATS),
        GL_PACK_ALIGNMENT(GLES32.GL_PACK_ALIGNMENT),
        GL_PACK_ROW_LENGTH(GLES32.GL_PACK_ROW_LENGTH),
        GL_PACK_SKIP_PIXELS(GLES32.GL_PACK_SKIP_PIXELS),
        GL_PACK_SKIP_ROWS(GLES32.GL_PACK_SKIP_ROWS),
        GL_PIXEL_PACK_BUFFER_BINDING(GLES32.GL_PIXEL_PACK_BUFFER_BINDING),
        GL_PIXEL_UNPACK_BUFFER_BINDING(GLES32.GL_PIXEL_UNPACK_BUFFER_BINDING),
        GL_READ_BUFFER(GLES32.GL_READ_BUFFER),
        GL_READ_FRAMEBUFFER_BINDING(GLES32.GL_READ_FRAMEBUFFER_BINDING),
        GL_RED_BITS(GLES32.GL_RED_BITS),
        GL_RENDERBUFFER_BINDING(GLES32.GL_RENDERBUFFER_BINDING),
        GL_SAMPLE_ALPHA_TO_COVERAGE(GLES32.GL_SAMPLE_ALPHA_TO_COVERAGE),
        GL_SAMPLE_BUFFERS(GLES32.GL_SAMPLE_BUFFERS),
        GL_SAMPLER_BINDING(GLES32.GL_SAMPLER_BINDING),
        GL_SAMPLES(GLES32.GL_SAMPLES),
        GL_STENCIL_BACK_FAIL(GLES32.GL_STENCIL_BACK_FAIL),
        GL_STENCIL_BACK_FUNC(GLES32.GL_STENCIL_BACK_FUNC),
        GL_STENCIL_BACK_PASS_DEPTH_FAIL(GLES32.GL_STENCIL_BACK_PASS_DEPTH_FAIL),
        GL_STENCIL_BACK_PASS_DEPTH_PASS(GLES32.GL_STENCIL_BACK_PASS_DEPTH_PASS),
        GL_STENCIL_BACK_REF(GLES32.GL_STENCIL_BACK_REF),
        GL_STENCIL_BACK_VALUE_MASK(GLES32.GL_STENCIL_BACK_VALUE_MASK),
        GL_STENCIL_BACK_WRITEMASK(GLES32.GL_STENCIL_BACK_WRITEMASK),
        GL_STENCIL_BITS(GLES32.GL_STENCIL_BITS),
        GL_STENCIL_CLEAR_VALUE(GLES32.GL_STENCIL_CLEAR_VALUE),
        GL_STENCIL_FAIL(GLES32.GL_STENCIL_FAIL),
        GL_STENCIL_FUNC(GLES32.GL_STENCIL_FUNC),
        GL_STENCIL_PASS_DEPTH_FAIL(GLES32.GL_STENCIL_PASS_DEPTH_FAIL),
        GL_STENCIL_PASS_DEPTH_PASS(GLES32.GL_STENCIL_PASS_DEPTH_PASS),
        GL_STENCIL_REF(GLES32.GL_STENCIL_REF),
        GL_STENCIL_VALUE_MASK(GLES32.GL_STENCIL_VALUE_MASK),
        GL_STENCIL_WRITEMASK(GLES32.GL_STENCIL_WRITEMASK),
        GL_SUBPIXEL_BITS(GLES32.GL_SUBPIXEL_BITS),
        GL_TEXTURE_BINDING_2D(GLES32.GL_TEXTURE_BINDING_2D),
        GL_TEXTURE_BINDING_2D_ARRAY(GLES32.GL_TEXTURE_BINDING_2D_ARRAY),
        GL_TEXTURE_BINDING_3D(GLES32.GL_TEXTURE_BINDING_3D),
        GL_TEXTURE_BINDING_CUBE_MAP(GLES32.GL_TEXTURE_BINDING_CUBE_MAP),
        GL_TRANSFORM_FEEDBACK_BINDING(GLES32.GL_TRANSFORM_FEEDBACK_BINDING),
        GL_TRANSFORM_FEEDBACK_BUFFER_BINDING(GLES32.GL_TRANSFORM_FEEDBACK_BUFFER_BINDING),
        GL_UNIFORM_BUFFER_BINDING(GLES32.GL_UNIFORM_BUFFER_BINDING),
        GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT(GLES32.GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT),
        GL_UNPACK_ALIGNMENT(GLES32.GL_UNPACK_ALIGNMENT),
        GL_UNPACK_IMAGE_HEIGHT(GLES32.GL_UNPACK_IMAGE_HEIGHT),
        GL_UNPACK_ROW_LENGTH(GLES32.GL_UNPACK_ROW_LENGTH),
        GL_UNPACK_SKIP_IMAGES(GLES32.GL_UNPACK_SKIP_IMAGES),
        GL_UNPACK_SKIP_PIXELS(GLES32.GL_UNPACK_SKIP_PIXELS),
        GL_UNPACK_SKIP_ROWS(GLES32.GL_UNPACK_SKIP_ROWS),
        GL_VERTEX_ARRAY_BINDING(GLES32.GL_VERTEX_ARRAY_BINDING);

        override fun glGet() = rawGetIntArray(glCode, 1)[0]
    }
    enum class IntegerArrayVariable(val glCode: Int, val nElements: Int) : IVar<LongArray> {
        GL_MAX_VIEWPORT_DIMS(GLES32.GL_MAX_VIEWPORT_DIMS, 2),
        GL_SCISSOR_BOX(GLES32.GL_SCISSOR_BOX, 4),
        GL_VIEWPORT(GLES32.GL_VIEWPORT, 4);

        override fun glGet() = rawGetIntArray(glCode, nElements)
    }
    enum class IntegerBigArrayVariable(val glCode: Int, val glMaxVariable: IntegerVariable) : IVar<LongArray> {
        GL_COMPRESSED_TEXTURE_FORMATS(GLES32.GL_COMPRESSED_TEXTURE_FORMATS, IntegerVariable.GL_NUM_COMPRESSED_TEXTURE_FORMATS),
        GL_PROGRAM_BINARY_FORMATS(GLES32.GL_PROGRAM_BINARY_FORMATS, IntegerVariable.GL_NUM_PROGRAM_BINARY_FORMATS),
        GL_SHADER_BINARY_FORMATS(GLES32.GL_SHADER_BINARY_FORMATS, IntegerVariable.GL_NUM_SHADER_BINARY_FORMATS);

        override fun glGet() = rawGetIntArray(glCode, glMaxVariable.glGet().toInt())
    }

    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)
    enum class IndexedIntegerVariableGLES31(val glCode: Int) : IVarWithIndexArg<Int>{
        GL_MAX_COMPUTE_WORK_GROUP_COUNT(GLES32.GL_MAX_COMPUTE_WORK_GROUP_COUNT),
        GL_MAX_COMPUTE_WORK_GROUP_SIZE(GLES32.GL_MAX_COMPUTE_WORK_GROUP_SIZE),
        GL_SHADER_STORAGE_BUFFER_BINDING(GLES32.GL_SHADER_STORAGE_BUFFER_BINDING),
        GL_SHADER_STORAGE_BUFFER_SIZE(GLES32.GL_SHADER_STORAGE_BUFFER_SIZE),
        GL_SHADER_STORAGE_BUFFER_START(GLES32.GL_SHADER_STORAGE_BUFFER_START),
        GL_VERTEX_BINDING_DIVISOR(GLES32.GL_VERTEX_BINDING_DIVISOR),
        GL_VERTEX_BINDING_OFFSET(GLES32.GL_VERTEX_BINDING_OFFSET),
        GL_VERTEX_BINDING_STRIDE(GLES32.GL_VERTEX_BINDING_STRIDE);

        override fun glGet(idx: Int) = rawGetIndexedInt(glCode, idx)
    }
    enum class IndexedIntegerVariable(val glCode: Int) : IVarWithIndexArg<Int> {
        GL_TRANSFORM_FEEDBACK_BUFFER_BINDING(GLES32.GL_TRANSFORM_FEEDBACK_BUFFER_BINDING),
        GL_TRANSFORM_FEEDBACK_BUFFER_SIZE(GLES32.GL_TRANSFORM_FEEDBACK_BUFFER_SIZE),
        GL_TRANSFORM_FEEDBACK_BUFFER_START(GLES32.GL_TRANSFORM_FEEDBACK_BUFFER_START),
        GL_UNIFORM_BUFFER_BINDING(GLES32.GL_UNIFORM_BUFFER_BINDING),
        GL_UNIFORM_BUFFER_SIZE(GLES32.GL_UNIFORM_BUFFER_SIZE),
        GL_UNIFORM_BUFFER_START(GLES32.GL_UNIFORM_BUFFER_START);

        override fun glGet(idx: Int) = rawGetIndexedInt(glCode, idx)
    }
    enum class OffsetIntVariable(val glCode: Int) : IVarWithOffsetName<Long> {
        GL_DRAW_BUFFER(GLES32.GL_DRAW_BUFFER0);
        override fun glGet(glCodeOffset: Int) = rawGetIntArray(glCode + glCodeOffset, 1)[0]
    }
    enum class FloatVariable(val glCode: Int) : IVar<Float> {
        GL_DEPTH_CLEAR_VALUE(GLES32.GL_DEPTH_CLEAR_VALUE),
        GL_LINE_WIDTH(GLES32.GL_LINE_WIDTH),
        GL_MAX_TEXTURE_LOD_BIAS(GLES32.GL_MAX_TEXTURE_LOD_BIAS),
        GL_POLYGON_OFFSET_FACTOR(GLES32.GL_POLYGON_OFFSET_FACTOR),
        GL_POLYGON_OFFSET_UNITS(GLES32.GL_POLYGON_OFFSET_UNITS),
        GL_SAMPLE_COVERAGE_VALUE(GLES32.GL_SAMPLE_COVERAGE_VALUE);

        override fun glGet() = rawGetFloatArray(glCode, 1)[0]
    }
    enum class FloatArrayVariable(val glCode: Int, val nValues: Int) : IVar<FloatArray> {
        GL_ALIASED_LINE_WIDTH_RANGE(GLES32.GL_ALIASED_LINE_WIDTH_RANGE, 2),
        GL_ALIASED_POINT_SIZE_RANGE(GLES32.GL_ALIASED_POINT_SIZE_RANGE, 2),
        GL_BLEND_COLOR(GLES32.GL_BLEND_COLOR, 4),
        GL_COLOR_CLEAR_VALUE(GLES32.GL_COLOR_CLEAR_VALUE, 4),
        GL_DEPTH_RANGE(GLES32.GL_DEPTH_RANGE, 2);
        override fun glGet() = rawGetFloatArray(glCode, nValues)
    }
    enum class BooleanVariable(val glCode: Int) : IVar<Boolean> {
        GL_BLEND(GLES32.GL_BLEND),
        GL_CULL_FACE(GLES32.GL_CULL_FACE),
        GL_DEPTH_TEST(GLES32.GL_DEPTH_TEST),
        GL_DEPTH_WRITEMASK(GLES32.GL_DEPTH_WRITEMASK),
        GL_DITHER(GLES32.GL_DITHER),
        GL_POLYGON_OFFSET_FILL(GLES32.GL_POLYGON_OFFSET_FILL),
        GL_PRIMITIVE_RESTART_FIXED_INDEX(GLES32.GL_PRIMITIVE_RESTART_FIXED_INDEX),
        GL_RASTERIZER_DISCARD(GLES32.GL_RASTERIZER_DISCARD),
        GL_SAMPLE_COVERAGE(GLES32.GL_SAMPLE_COVERAGE),
        GL_SAMPLE_COVERAGE_INVERT(GLES32.GL_SAMPLE_COVERAGE_INVERT),
        GL_SCISSOR_TEST(GLES32.GL_SCISSOR_TEST),
        GL_SHADER_COMPILER(GLES32.GL_SHADER_COMPILER),
        GL_STENCIL_TEST(GLES32.GL_STENCIL_TEST),
        GL_TRANSFORM_FEEDBACK_ACTIVE(GLES32.GL_TRANSFORM_FEEDBACK_ACTIVE),
        GL_TRANSFORM_FEEDBACK_PAUSED(GLES32.GL_TRANSFORM_FEEDBACK_PAUSED);
        override fun glGet() = rawGetBoolArray(glCode, 1)[0]
    }
    enum class BooleanArrayVariable(val glCode: Int, val nValues: Int) : IVar<BooleanArray> {
        GL_COLOR_WRITEMASK(GLES32.GL_COLOR_WRITEMASK, 4);
        override fun glGet() = rawGetBoolArray(glCode, nValues)
    }
    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)
    enum class IndexedBooleanVariable(val glCode: Int) : IVarWithIndexArg<Boolean> {
        GL_IMAGE_BINDING_LAYERED(GLES32.GL_IMAGE_BINDING_LAYERED);
        override fun glGet(idx: Int) : Boolean {
            val destination = BooleanArray(1)
            GLES32.glGetBooleani_v(glCode, idx, destination, 0)
            return destination[0]
        }
    }

    enum class StringVariable(val glCode: Int) : IVar<String> {
        GL_VENDOR(GLES32.GL_VENDOR),
        GL_RENDERER(GLES32.GL_RENDERER),
        GL_VERSION(GLES32.GL_VERSION),
        GL_SHADING_LANGUAGE_VERSION(GLES32.GL_SHADING_LANGUAGE_VERSION);
        override fun glGet() : String {
            return GLES32.glGetString(glCode)
        }
    }
    enum class IndexedStringVariable(val glCode: Int) : IVarWithIndexArg<String> {
        GL_EXTENSIONS(GLES32.GL_EXTENSIONS);
        override fun glGet(idx: Int) : String {
            return GLES32.glGetStringi(glCode, idx)
        }
    }

    fun <T, V:IVar<T>> get(variable: V): T = variable.glGet()
    fun <T, V:IVarWithIndexArg<T>> get(variable: V, idx: Int): T = variable.glGet(idx)
    fun <T, V:IVarWithOffsetName<T>> get(variable: V, glCodeOffset: Int): T = variable.glGet(glCodeOffset)

    private fun rawGetIntArray(glCode: Int, nElements: Int) : LongArray {
        val destination = LongArray(nElements)
        GLES32.glGetInteger64v(glCode, destination, 0)
        return destination
    }
    private fun rawGetIndexedInt(glCode: Int, idx: Int) : Int {
        val destination = IntArray(1)
        GLES32.glGetIntegeri_v(glCode, idx, destination, 0)
        return destination[0]
    }
    private fun rawGetFloatArray(glCode: Int, nElements: Int) : FloatArray {
        val destination = FloatArray(nElements)
        GLES32.glGetFloatv(glCode, destination, 0)
        return destination
    }
    private fun rawGetBoolArray(glCode: Int, nElements: Int) : BooleanArray {
        val destination = BooleanArray(nElements)
        GLES32.glGetBooleanv(glCode, destination, 0)
        return destination
    }
}